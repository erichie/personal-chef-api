// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id            String   @id @default(uuid())
  email         String?  @unique
  emailVerified Boolean  @default(false)
  passwordHash  String?
  isAnonymous   Boolean  @default(false)
  isPro         Boolean  @default(false)
  
  // Social features
  displayName   String?
  friendCode    String?  @unique
  bio           String?
  avatarUrl     String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  profile           UserProfile?
  sessions          Session[]
  accounts          Account[]
  recipes           Recipe[]
  posts             RecipePost[]
  postLikes         PostLike[]
  comments          PostComment[]
  activities        FeedActivity[]
  mealPlans         MealPlan[]
  mealPlanPosts     MealPlanPost[]
  mealPlanPostLikes MealPlanPostLike[]
  mealPlanComments  MealPlanPostComment[]
  sentShares        MealPlanShare[] @relation("SentShares")
  receivedShares    MealPlanShare[] @relation("ReceivedShares")
  sentRecipeShares     RecipeShare[] @relation("SentRecipeShares")
  receivedRecipeShares RecipeShare[] @relation("ReceivedRecipeShares")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  expiresAt         DateTime?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
  @@index([userId])
}

model UserProfile {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Store full JSON blobs for flexibility
  chefIntake   Json?     // ChefIntake object from onboarding
  inventory    Json?     // Array of InventoryItem objects
  mealPlans    Json?     // Record<weekId, MealPlanJSON>
  groceryList  Json?     // Array of GroceryItem objects
  achievements Json?     // Record<achievementId, Achievement>
  streaks      Json?     // { mealPlanStreak: StreakData, cookingStreak: StreakData }
  tokenState   Json?     // TokenState object
  
  lastSyncedAt DateTime?
  syncVersion  Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Recipes stored as separate table for better querying
// and future sharing features
model Recipe {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Recipe details
  title        String
  description  String?
  servings     Int?
  totalMinutes Int?
  tags         Json?    // Array of strings
  ingredients  Json     // Array of IngredientJSON objects
  steps        Json?    // Array of StepJSON objects
  
  // Semantic search
  embedding           Unsupported("vector(384)")?
  embeddingVersion    Int?     @default(1)
  
  // Metadata
  source       String?  // "generated", "pasted", "meal-plan"
  sourceUrl    String?  // URL where recipe came from
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  posts        RecipePost[]
  usages       RecipeUsage[]
  shares       RecipeShare[]
  
  @@index([userId])
  @@index([userId, createdAt])
}

// Friendship management
model Friendship {
  id        String            @id @default(uuid())
  userId    String
  friendId  String
  status    FriendshipStatus  @default(pending)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  
  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@index([status])
}

enum FriendshipStatus {
  pending
  accepted
  declined
  blocked
}

// Recipe posts - status updates tied to recipes
model RecipePost {
  id        String   @id @default(uuid())
  userId    String
  recipeId  String
  
  // Post content
  text      String?  // Optional caption/thoughts
  photoUrl  String?  // Optional photo of the dish
  rating    Int?     // 1-5 stars, optional
  review    String?  // Optional detailed review
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe        @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  likes     PostLike[]
  comments  PostComment[]
  
  @@index([userId])
  @@index([recipeId])
  @@index([createdAt])
}

// Likes on posts
model PostLike {
  id        String     @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime   @default(now())
  
  post      RecipePost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

// Comments on posts
model PostComment {
  id        String     @id @default(uuid())
  postId    String
  userId    String
  text      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  post      RecipePost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

// Feed activities - track all friend activities
model FeedActivity {
  id              String   @id @default(uuid())
  userId          String
  activityType    String   // "post", "meal_plan_post", "recipe_saved", "friend_added"
  
  // Polymorphic references (only one will be set)
  postId          String?
  recipeId        String?
  mealPlanPostId  String?
  
  // Activity metadata (stores friendId for friend_added activities)
  metadata        Json?
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@index([activityType])
}

// Track recipe usage in meal plans for variety tracking
model RecipeUsage {
  id        String   @id @default(uuid())
  userId    String
  recipeId  String
  usedAt    DateTime @default(now())
  
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@index([userId, usedAt])
  @@index([recipeId, usedAt])
  @@index([userId, recipeId, usedAt])
}

// Track AI endpoint usage for rate limiting and analytics
model AiUsage {
  id        String   @id @default(uuid())
  userId    String
  endpoint  String   // meal-plan, generate-recipe, replace-recipe, etc.
  createdAt DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([endpoint])
  @@index([userId, endpoint, createdAt])
}

// Meal plan templates - shareable meal plans (not tied to specific dates)
model MealPlan {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  
  // Days array with relative day structure (minimum 1 day)
  // Each day has meals (breakfast/lunch/dinner) with recipeId references
  days        Json
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       MealPlanPost[]
  shares      MealPlanShare[]
  
  @@index([userId])
  @@index([userId, createdAt])
}

// Meal plan posts - posts that reference meal plans
model MealPlanPost {
  id          String   @id @default(uuid())
  userId      String
  mealPlanId  String
  
  // Post content
  text        String?  // Optional caption/thoughts
  photoUrl    String?  // Optional photo
  rating      Int?     // 1-5 stars, optional
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealPlan    MealPlan                @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  likes       MealPlanPostLike[]
  comments    MealPlanPostComment[]
  
  @@index([userId])
  @@index([mealPlanId])
  @@index([createdAt])
}

// Likes on meal plan posts
model MealPlanPostLike {
  id        String       @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime     @default(now())
  
  post      MealPlanPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

// Comments on meal plan posts
model MealPlanPostComment {
  id        String       @id @default(uuid())
  postId    String
  userId    String
  text      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  post      MealPlanPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

// Direct meal plan shares to friends
model MealPlanShare {
  id          String   @id @default(uuid())
  mealPlanId  String
  senderId    String
  recipientId String
  message     String?  // Optional message from sender
  status      ShareStatus @default(pending)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  mealPlan    MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  sender      User     @relation("SentShares", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   User     @relation("ReceivedShares", fields: [recipientId], references: [id], onDelete: Cascade)
  
  @@index([senderId])
  @@index([recipientId])
  @@index([mealPlanId])
  @@index([recipientId, status])
}

// Direct recipe shares to friends
model RecipeShare {
  id          String   @id @default(uuid())
  recipeId    String
  senderId    String
  recipientId String
  message     String?  // Optional message from sender
  status      ShareStatus @default(pending)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  sender      User     @relation("SentRecipeShares", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   User     @relation("ReceivedRecipeShares", fields: [recipientId], references: [id], onDelete: Cascade)
  
  @@index([senderId])
  @@index([recipientId])
  @@index([recipeId])
  @@index([recipientId, status])
}

enum ShareStatus {
  pending
  viewed
  saved
  declined
}

